{
  // "vscodeMarkdownNotes.defaultFileExtension": "mdx",
  // "vscodeMarkdownNotes.noteCompletionConvention": "toSpaces", // rawFilename, toSpaces noExtension
  // "vscodeMarkdownNotes.slugifyCharacter": "NONE",
  // "vscodeMarkdownNotes.workspaceFilenameConvention": "relativePaths",
  // "vscodeMarkdownNotes.newNoteTemplate": "# ${noteName}\n\n${timestamp}",
  // "vscodeMarkdownNotes.triggerSuggestOnReplacement": false,
  "vscodeMarkdownNotes.allowPipedWikiLinks": true,
  // "vscodeMarkdownNotes.pipedWikiLinksSyntax": "desc|file",
  // "vscodeMarkdownNotes.slugifyMethod": "github",
  "cSpell.enableFiletypes": ["markdown", "plaintext"],
  "diffEditor.renderIndicators": true,
  // "docker-linter.rubocop.enable": true,
  "editor.formatOnSave": true,
  "editor.codeLens": false,
  "[ruby]": {
    "editor.formatOnSave": true
  },
  "editor.minimap.enabled": false,
  "editor.quickSuggestionsDelay": 1,
  // during dev show quick suggestions for markdown without ctrl+p
  "[markdown]": {
    "editor.quickSuggestions": {
      "other": true,
      "comments": true,
      "strings": true
    },
    "editor.wordBasedSuggestions": false,
    "editor.tabSize": 2,
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 75,
    // "editor.wordSeparators": "`~!@$%^&*()=+[{]}\\|;:'\",.<>/?", // remove '#' so tags can be searched. Does not seem to be working....
  },
  "[fountain]": {
    "editor.wordBasedSuggestions": true
  },
  "editor.acceptSuggestionOnEnter": "off",
  "editor.wordWrap": "on",
  "explorer.autoReveal": false,
  "files.autoSave": "off",
  "files.associations": {
    "*.dpl": "sql"
  },
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  // "eslint.autoFixOnSave": true,
  // "eslint.options": {
  //   "extensions": [".js", ".jsx", ".md", ".mdx", ".ts", ".tsx"]
  // },
  // "eslint.validate": ["javascript", "javascriptreact", "typescript"],
  "markdown.preview.fontSize": 18,
  // "gitlens.codeLens.enabled": false,
  "gutterpreview.imagePreviewMaxHeight": 270,
  // "prettier.eslintIntegration": true,
  "prettier.jsxBracketSameLine": true,
  // "prettier.parser": "flow",
  "prettier.printWidth": 100,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "es5",
  "python.formatting.provider": "black",
  "python.linting.flake8Enabled": true,
  "python.linting.mypyEnabled": true,
  "python.languageServer": "Pylance",
  "python.linting.pylintEnabled": false,
  "python.pythonPath": "~/.pyenv/shims/python",
  "python.defaultInterpreterPath": "~/.pyenv/shims/python",
  "[python]": {
    "files.trimFinalNewlines": true
  },
  "ruby.linter.run": "onSave",
  // "javascript.format.enable": true,
  "runInTerminal.commands": [
    // exec any file as a binary
    {
      "cmd": "${relativeFile}",
      "match": ".*",
      "name": "exec-file"
    },
    //////////////////////
    // jest typescript
    //////////////////////
    // jest: test suite
    {
      "cmd": "npx jest",
      "match": "\\.ts$",
      "name": "s"
    },
    //////////////////////
    // ruby
    //////////////////////
    // rspec: test line
    {
      "cmd": "./bin/rspec ${relativeFile}:${line}",
      "match": "_spec\\.rb$",
      "name": "l"
    },
    // rspec: test buffer
    {
      "cmd": "./bin/rspec ${relativeFile}",
      "match": "_spec\\.rb$",
      "name": "b"
    },
    // rspec: test suite
    {
      "cmd": "./bin/rspec",
      "match": "_spec\\.rb$",
      "name": "s"
    },
    //////////////////////
    // python
    //////////////////////
    // nose: test line
    {
      "cmd": "noseline ${relativeFile} --line=${line}",
      "match": "\\.py$",
      "name": "l"
    },
    // nose: test buffer
    {
      "cmd": "nosetests ${relativeFile}",
      "match": "\\.py$",
      "name": "b"
    }
  ],
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.cursorStyle": "block",
  "terminal.integrated.fontFamily": "MesloLGS NF",
  // "vim.disableAnnoyingNeovimMessage": true,
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-p>": false
  },
  "vim.hlsearch": true,
  "vim.leader": ",",
  "vim.insertModeKeyBindings": [
    // insert the current date, insert mode
    {
      "before": ["<C-d>"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE"
          }
        }
      ]
    }
  ], // END insert mode commands
  "vim.normalModeKeyBindingsNonRecursive": [
    // open link under cursor
    {
      "after": [],
      "before": ["g", "l"],
      "commands": [
        {
          "args": [],
          "command": "editor.action.openLink"
        }
      ]
    },
    // go to next error marker
    {
      "after": [],
      "before": ["<leader>", "e"],
      "commands": [
        {
          "args": [],
          "command": "editor.action.marker.next"
        }
      ]
    },
    // clear search buffer
    {
      "after": [],
      "before": ["<leader>", "/"],
      "commands": [":nohl"]
    },
    // copy everything in buffer to clipboard
    {
      "after": ["g", "g", "V", "G", "\"", "*", "y"],
      "before": ["<leader>", "c"],
      "commands": []
    },
    // run in terminal 'again'
    {
      "after": [],
      "before": ["<leader>", "r", "a"],
      "commands": [
        {
          "command": "runInTerminal.runLast"
        }
      ]
    },
    // run in terminal 'line'
    {
      "after": [],
      "before": ["<leader>", "r", "l"],
      "commands": [
        {
          "args": {
            "name": "l"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    // run in terminal 'buffer'
    {
      "after": [],
      "before": ["<leader>", "r", "b"],
      "commands": [
        {
          "args": {
            "name": "b"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    // run in terminal 'suite'
    {
      "after": [],
      "before": ["<leader>", "r", "s"],
      "commands": [
        {
          "args": {
            "name": "s"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    // goto next error flag
    {
      "after": [],
      "before": ["<leader>", "a"],
      "commands": [
        {
          "command": "editor.action.marker.nextInFiles"
        }
      ]
    },
    // run the current file in terminal
    {
      "after": [],
      "before": ["<leader>", "x"],
      "commands": [
        {
          "args": {
            "name": "exec-file"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    // insert a (roughly) title cased version of the filename
    // eg, for `some-file.md`, "Some File"
    {
      "before": [",", "f", "f"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "${TM_FILENAME_BASE/([A-Za-z]+)([-_]*)/${1:/capitalize}${2:+ }/g}"
          }
        }
      ]
    },
    // open quickfix z=
    {
      "after": [],
      "before": ["z", "="],
      "commands": [
        {
          "args": [],
          "command": "editor.action.quickFix"
        }
      ]
    },
    // go to the top, enter some newlines, and enter insert mode
    // useful for prepending new entries to journal, eg
    {
      "after": ["g", "g", "j", "j", "O", "<Esc>", "O"],
      "before": ["<leader>", "g"],
      "commands": []
    },
    // insert the current date as markdown header, normal mode
    {
      "before": ["<leader>", "t"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\n# $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\n\n"
          }
        }
      ]
    },
    // insert the current date as markdown header NEAR TOP OF FILE
    {
      "before": ["<leader>", "d"],
      "after": ["g", "g", "j", "j", "O"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "# $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\n\n"
          }
        }
      ]
    },
    // insert a horizontal rule
    {
      "before": ["<leader>", "h"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\n---\n\n"
          }
        }
      ]
    },
    // move paragraph down / FIXME: working fully?
    {
      "before": ["≥"], // alt + .
      "after": ["{", "V", "}", "k", "d", "}", "k", "p", "j"],
      "commands": []
    },
    // move paragraph down / FIXME: working fully?
    {
      "before": ["≤"], // alt + ,
      "after": ["}", "V", "{", "j", "d", "{", "{", "p"],
      "commands": []
    }
  ],
  "window.title": "${activeEditorMedium}${separator}${rootName}",
  "workbench.activityBar.visible": false,
  "workbench.colorCustomizations": {
    "editor.lineHighlightBorder": "#444444",
    "editorCursor.foreground": "#f44271",
    "tab.activeForeground": "#ffffff",
    "tab.activeBorderTop": "#f44271",
    "tab.unfocusedActiveBorderTop": "#444444",
    "tab.unfocusedActiveForeground": "#555555",
    "terminalCursor.foreground": "#f44271",
    "statusBar.background": "#202225"
  },
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.startupEditor": "newUntitledFile",
  "workbench.statusBar.visible": true,
  "zenMode.hideStatusBar": false,
  "editor.tokenColorCustomizations": {
    "[Tomorrow Night]": {
      "textMateRules": [
        {
          "scope": "markup.quote.markdown",
          "settings": {
            "foreground": "#666"
          }
        },
        {
          "scope": "meta.image.inline.markdown",
          "settings": {
            "foreground": "#2a6140"
          }
        },
        {
          "scope": "meta.image.inline.markdown string.other.link.description.markdown",
          "settings": {
            "foreground": "#449965"
          }
        },
        {
          "scope": "markup.inline.raw",
          "settings": {
            "foreground": "#f19999"
          }
        },
        {
          "scope": "markup.italic.markdown",
          "settings": {
            "fontStyle": "italic"
          }
        },
        {
          "scope": "punctuation.definition.italic.markdown",
          "settings": {
            "foreground": "#555"
          }
        },
        {
          "scope": "markup.bold.markdown",
          "settings": {
            "fontStyle": "bold",
            "foreground": "#efefef"
          }
        },
        {
          "scope": "punctuation.definition.bold.markdown",
          "settings": {
            "foreground": "#555"
          }
        }
      ]
    }
  },
  "explorer.confirmDelete": false,
  "editor.fontFamily": "Monaco, Menlo, Consolas, 'Courier New', monospace",
  "cSpell.userWords": [
    "Acquemini",
    "Adderrall",
    "Arendt",
    "Asha",
    "Barbes",
    "Braimah",
    "Bretton",
    "COVID",
    "Cabeza",
    "Citi",
    "Corea",
    "Corea's",
    "D'Angelo",
    "Decompiling",
    "Djovamin",
    "Drom",
    "Dunkin",
    "Emeryville",
    "Frankl",
    "Goedel's",
    "Gramith's",
    "Guantanamera",
    "Herbie",
    "Hiromi",
    "Hiromi's",
    "Iqram",
    "J",
    "Jürgen",
    "Kaneda",
    "Kidjo",
    "Kortina",
    "Kunal",
    "Kweli's",
    "Laderman",
    "Mierle",
    "Moto",
    "Nuyorican",
    "Outkast",
    "Outkast's",
    "Pedrito",
    "Pedrito's",
    "Perpetuo",
    "Phillipsburg",
    "Pollan's",
    "Ponzi",
    "Prolly",
    "Radiohead",
    "Rockwood",
    "Sanabria",
    "Schmidhuber's",
    "Seaton",
    "Soundsystem",
    "Spotify",
    "Stiglitz",
    "Talib",
    "Tarkovsky",
    "Ukeles",
    "Weedie",
    "Youngblood",
    "Zellerbach",
    "autoplay",
    "backgrounding",
    "boto",
    "disintermediate",
    "endfor",
    "factionalize",
    "ffmpeg",
    "financialization",
    "finxpc",
    "fived",
    "hmac",
    "iframe",
    "infantilizes",
    "logline",
    "miscalibrated",
    "neurochemistry",
    "nodenv",
    "noqa",
    "pharma",
    "predistribution",
    "rgen",
    "rouler",
    "soundcloud",
    "subak",
    "sundance",
    "venmo",
    "vetocracy",
    "youtube"
  ],
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "workbench.colorTheme": "Tomorrow Night",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "workbench.editorAssociations": [
    {
      "viewType": "jupyter-notebook",
      "filenamePattern": "*.ipynb"
    }
  ]
}
